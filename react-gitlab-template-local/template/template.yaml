apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
metadata:
  name: gitlab-demo
  title: Gitlab DEMO 1
  description: Scaffolder Gitlab Demo
spec:
  owner: backstage/techdocs-core
  type: service

  parameters:
    - title: Fill in service info
      required:
        - name
        - group
        - repo
      properties:
        name:
          title: Project Name
          type: string
          description: Tên project (hiển thị)

        group:
          title: GitLab Group Name
          type: string
          description: Tên namespace/group trong GitLab mà bạn có quyền

        repo:
          title: Repository Name
          type: string
          description: Tên repo sẽ được tạo trong group

  steps:
    - id: checkGroup
      name: Check if GitLab Group exists
      action: gitlab:group:ensureExists
      input:
        repoUrl: gitlab.com?owner=${{ parameters.group }}
        path:
          - ${{ parameters.group }}
      if: true  # chạy luôn
    - id: checkRepo
      name: Check if Repository already exists
      action: gitlab:project:checkExists
      input:
        repoUrl: gitlab.com?owner=${{ parameters.group }}&repo=${{ parameters.repo }}
      # Nếu repo đã tồn tại, action sẽ throw lỗi InputError → fail flow luôn

    - id: fetch
      name: Fetch local source
      action: fetch:plain
      input:
        url: ./code

    - id: publish
      name: Publish
      action: publish:gitlab
      input:
        description: This is ${{ parameters.name }}
        repoUrl: gitlab.com?owner=${{ parameters.group }}&repo=${{ parameters.repo }}
        sourcePath: pimcore
        defaultBranch: main

    - id: gitlab-deploy-token
      name: Create Deploy Token
      action: gitlab:projectDeployToken:create
      input:
        repoUrl: gitlab.com?owner=${{ parameters.group }}&repo=${{ parameters.repo }}
        projectId: "${{ steps['publish'].output.projectId }}"
        name: ${{ parameters.name }}-secret
        username: ${{ parameters.name }}-secret
        scopes: ['read_registry']

    - id: gitlab-access-token
      name: Gitlab Project Access Token
      action: gitlab:projectAccessToken:create
      input:
        repoUrl: gitlab.com?owner=${{ parameters.group }}&repo=${{ parameters.repo }}
        projectId: "${{ steps['publish'].output.projectId }}"
        name: ${{ parameters.name }}-access-token
        accessLevel: 40
        scopes: ['read_repository', 'write_repository']

    - id: gitlab-project-variable
      name: Gitlab Project Variable
      action: gitlab:projectVariable:create
      input:
        repoUrl: gitlab.com?owner=${{ parameters.group }}&repo=${{ parameters.repo }}
        projectId: "${{ steps['publish'].output.projectId }}"
        key: 'VARIABLE_NAME'
        value: "${{ steps['gitlab-access-token'].output.access_token }}"
        variableType: 'env_var'
        masked: true
        variableProtected: false
        raw: false
        environmentScope: '*'

    - id: register
      name: Register
      action: catalog:register
      input:
        repoContentsUrl: ${{ steps['publish'].output.repoContentsUrl }}
        catalogInfoPath: '/catalog-info.yaml'

    - id: gitlabIssue
      name: Issues
      action: gitlab:issues:create
      input:
        repoUrl: gitlab.com?owner=${{ parameters.group }}&repo=${{ parameters.repo }}
        token: ${{ secrets.USER_OAUTH_TOKEN }}
        projectId: 1111111
        title: Test Issue
        assignees:
          - 2222222
        description: This is the description of the issue
        confidential: true
        createdAt: 2022-09-27 18:00:00.000
        dueDate: 2024-09-28 12:00:00.000
        epicId: 3333333
        labels: phase1:label1,phase2:label2

  output:
    links:
      - title: Repository
        url: ${{ steps['publish'].output.remoteUrl }}
      - title: Link to new issue
        url: ${{ steps['gitlabIssue'].output.issueUrl }}
